# ============================================================================
# AUTHFORGE ENVIRONMENT CONFIGURATION
# ============================================================================
#
# This file defines all environment variables required to run AuthForge.
# Copy this to .env.local and fill in your actual values.
#
# NEVER commit actual values to version control!
# Use .env.local for local development (added to .gitignore)
# Use secrets management (Docker Secrets, K8s Secrets, Vault) for production
#
# ============================================================================
# DATABASE CONFIGURATION
# ============================================================================

# PostgreSQL Connection String
# Format: postgresql://[user[:password]@][netloc][:port][/dbname][?param1=value1&...]
#
# Development (local PostgreSQL):
# DATABASE_URL=postgresql://postgres:postgres@localhost:5432/authforge
#
# Production (managed service):
# DATABASE_URL=postgresql://user:password@host.example.com:5432/authforge?sslmode=require
#
# Connection Pool Options (optional):
# - sslmode=require: Enforce SSL (recommended for production)
# - statement_cache_size=0: Disable statement caching for pooling compatibility
# - schema=public: Specify schema
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/authforge

# ============================================================================
# APPLICATION CONFIGURATION
# ============================================================================

# Node Environment
# Options: development, production, test
# Controls security settings (HTTPS, cookies, CORS)
NODE_ENV=development

# Application Port
# Default: 3000
# Configurable at runtime via PORT environment variable
PORT=3000

# Node.js Memory Limit
# Used in Docker: NODE_OPTIONS=--max-old-space-size=512
# Adjust based on available memory in your container/server
NODE_OPTIONS=--max-old-space-size=512

# Application Host URL
# Used for:
# - Email verification links
# - Password reset links
# - Invitation acceptance links
# - OAuth redirect URIs (if added)
#
# Development: http://localhost:3000
# Staging: https://staging.authforge.example.com
# Production: https://authforge.example.com
HOST_URL=http://localhost:3000

# Public App URL (accessible from browser)
# If behind reverse proxy/CDN, use the public URL
# If blank, defaults to HOST_URL
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ============================================================================
# SECURITY CONFIGURATION
# ============================================================================

# JWT Secret for signing tokens
# Generate with: openssl rand -base64 32
# Requirements:
#   - Minimum 32 characters
#   - Should be random and unique
#   - DO NOT commit to repository
#   - Rotate regularly in production
#
# WARNING: Changing this invalidates all existing tokens!
JWT_SECRET=generate_with_openssl_rand_base64_32

# Rate Limiting Configuration (optional)
# Default limits:
# - Login: 5 requests per minute per IP
# - Token exchange: 10 requests per minute per IP
# - Registration: 3 requests per minute per IP
RATE_LIMIT_ENABLED=true
RATE_LIMIT_WINDOW=15m
RATE_LIMIT_MAX_REQUESTS=100

# ============================================================================
# EMAIL SERVICE CONFIGURATION (MAILGUN)
# ============================================================================

# Mailgun API Key
# Get from: https://app.mailgun.com/app/account/security/api_tokens
# Format: key-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# Permissions needed: Send messages, validate addresses
MAILGUN_API_KEY=your_mailgun_api_key_here

# Mailgun Domain
# Get from: https://app.mailgun.com/app/sending/domains
# Must be:
# - Verified with DKIM/SPF records in your DNS
# - Active (not suspended)
# - Examples: mg.authforge.com, mail.example.com
MAILGUN_DOMAIN=your_mailgun_domain_here

# Sender Email Address
# Must be:
# - Valid email format
# - From your Mailgun domain (or authorized sender)
# - Example: noreply@authforge.com, hello@example.com
FROM_EMAIL=noreply@yourdomain.com

# ============================================================================
# CORS CONFIGURATION
# ============================================================================

# Allowed Origins for API Access
# Comma-separated list of domains allowed to make API requests from browser
# Examples:
# - Development: http://localhost:3000,http://localhost:3001
# - Production: https://app.example.com,https://web.example.com
#
# SECURITY: Leave empty in development to allow all origins (insecure!)
# SECURITY: In production, explicitly list allowed origins only
# SECURITY: Never use wildcards (*) in production
#
# Format: origin1,origin2,origin3
# Origins must include protocol (http:// or https://)
ALLOWED_ORIGINS=

# ============================================================================
# LOGGING CONFIGURATION (optional)
# ============================================================================

# Log Level
# Options: error, warn, info, debug, trace
# Default: info
# Development: debug or trace (verbose output)
# Production: info or warn (minimal output)
LOG_LEVEL=info

# ============================================================================
# DEPLOYMENT CONFIGURATION
# ============================================================================

# Database User (for Docker/Compose)
# Used when provisioning PostgreSQL container
DB_USER=authforge
DB_PASSWORD=development_password
DB_NAME=authforge
DB_PORT=5432

# ============================================================================
# DEPRECATED / MIGRATION NOTES
# ============================================================================

# Previous email service (Resend)
# Replaced with Mailgun. If you were using Resend:
# - Update email templates if needed
# - RESEND_API_KEY is no longer used
# RESEND_API_KEY=deprecated_do_not_use

# ============================================================================
# ENVIRONMENT VARIABLE GENERATION COMMANDS
# ============================================================================

# Generate JWT_SECRET:
#   openssl rand -base64 32
#
# Generate secure random string (32 chars):
#   openssl rand -base64 24
#
# Generate secure password:
#   openssl rand -base64 16
#
# ============================================================================
# SECURITY CHECKLIST FOR PRODUCTION
# ============================================================================

# ✓ Never commit .env to version control
# ✓ Use .env.local for local development (in .gitignore)
# ✓ Use secrets management for production (Docker Secrets, K8s Secrets, Vault)
# ✓ Rotate JWT_SECRET regularly
# ✓ Use HTTPS for HOST_URL in production
# ✓ Set NODE_ENV=production in production
# ✓ Explicitly configure ALLOWED_ORIGINS (never leave empty)
# ✓ Use strong DATABASE_URL password (20+ characters)
# ✓ Enable SSL for database connections (sslmode=require)
# ✓ Regularly audit email service credentials and permissions
# ✓ Monitor rate limiting to detect brute force attempts
# ✓ Implement log aggregation and alerting
# ✓ Regular security audits and updates
