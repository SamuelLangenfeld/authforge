// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  name                  String
  password              String
  emailVerified         DateTime?
  memberships           Membership[]
  verificationTokens    VerificationToken[]
  passwordResetTokens   PasswordResetToken[]
  createdAt             DateTime               @default(now())

  @@index([email])
}

model Organization {
  id           String       @id @default(uuid())
  name         String
  memberships  Membership[]
  apiCredentials  ApiCredential[]
  invitations  Invitation[]
}

model ApiCredential {
  id           String       @id @default(uuid())
  orgId        String
  organization Organization  @relation(fields: [orgId], references: [id], onDelete: Cascade)
  clientId     String       @unique
  clientSecret String
  createdAt    DateTime     @default(now())

  @@index([orgId])
  @@index([clientId])
}

model RefreshToken {
  id           String       @id @default(uuid())
  token        String       @unique
  clientId     String
  expiresAt    DateTime
  createdAt    DateTime     @default(now())

  @@index([clientId])
  @@index([expiresAt])
}

model Role {
  id           String       @id @default(uuid())
  name         String       
  memberships  Membership[]
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  orgId          String
  roleId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  role           Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, orgId])
  @@index([userId])
  @@index([orgId])
  @@index([roleId])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

model Invitation {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  orgId     String
  createdBy String
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([orgId])
  @@index([email])
  @@index([token])
  @@index([expiresAt])
}